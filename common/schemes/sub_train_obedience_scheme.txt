sub_train_obedience = {

	skill = martial
	uses_agents = no
	power_per_skill_point = 2
	resistance_per_skill_point = 0
	minimum_progress_chance = 25
	maximum_progress_chance = 99
	maximum_success = 100

	# Does not use Spymaster
	spymaster_power_per_skill_point = 0
	spymaster_resistance_per_skill_point = 0

	allow = {
		is_ai = no
		scope:target = {
			sub_can_be_obedience_trained_trigger = { DOMINANT = scope:owner }
		}
	}

	valid = {
		is_imprisoned = no

		scope:target = {
			OR = {
				exists = location
				in_diplomatic_range = scope:owner
			}
		}
	}

	base_success_chance = {
		base = 1000
	}

	# Just fire conclusion event; no chance of discovery and scheme owner is always player
	on_ready = {
		scheme_owner = {
			trigger_event = sub_train_obedience_outcome.2000
		}
	}

	on_invalidated = {
		# Dead target
		if = {
			limit = {
				scheme_target = { is_alive = no }
			}
			scheme_owner = {
				trigger_event = sub_train_obedience_outcome.0002
			}
		}

		# Has none of the original qualifying relationships
		if = {
			limit = {
				NOT = { scheme_progress = 100 }
				scheme_owner = {
					NOR = {
						is_consort_of = scope:scheme.scheme_target
						has_relation_lover = scope:scheme.scheme_target
						has_relation_soulmate = scope:scheme.scheme_target
						has_relation_submissive = scope:scheme.scheme_target
					}
				}
			}
			scheme_owner = {
				trigger_event = sub_train_obedience_outcome.0001
			}
		}

		# Misc conditions like being imprisoned, no more diplo range
		else_if = { #fallback invalidation
			limit = {
				OR = {
					scope:owner = { is_imprisoned = yes }

					scope:target = {
						NOR = {
							exists = location
							in_diplomatic_range = scope:owner
						}
					}
				}
			}
			scheme_owner = {
				send_interface_message = {
					type = event_generic_neutral
					title = sub_train_obedience
					left_icon = scope:target
					custom_tooltip = sub_train_obedience_invalid
				}
			}
		}
	}

	# trigger training start event
	on_start = {
		save_scope_as = scheme
		scheme_owner = { save_scope_as = owner }
		scheme_target = { save_scope_as = target }

		scope:scheme = {
			sub_train_obedience_set_dummy_variables = yes
			sub_set_scheme_opinion_modifier = yes
		}

		scope:owner = {
			trigger_event = {
				on_action = sub_train_obedience_start
				days = { 3 7 }
			}
		}

	}

	on_monthly = {
		save_scope_as = scheme
		scheme_owner = { save_scope_as = owner }
		scheme_target = { save_scope_as = target }

		scope:scheme = {
			sub_set_scheme_opinion_modifier = yes
		}

		# Milestone 1 event
		if = {
			limit = {
				scheme_progress >= 2
				NOT = { has_scheme_modifier = sub_training_milestone_scheme_power_1 }
			}
			scheme_owner = {
				trigger_event = { on_action = sub_train_obedience_milestone_1 }
			}
		}

		# Milestone 2 event
		if = {
			limit = {
				scheme_progress >= 4
				NOT = { has_scheme_modifier = sub_training_milestone_scheme_power_2 }
			}
			scheme_owner = {
				trigger_event = { on_action = sub_train_obedience_milestone_2 }
			}
		}
		# Milestone 3 event
		if = {
			limit = {
				scheme_progress >= 7
				NOT = { has_scheme_modifier = sub_training_milestone_scheme_power_3 }
			}
			scheme_owner = {
				trigger_event = { on_action = sub_train_obedience_milestone_3 }
			}
		}

	}
	success_desc = "SUB_TRAIN_OBEDIENCE_SUCCESS_DESC"
}
