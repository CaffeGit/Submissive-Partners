# The outcome of a sub_train_obedience scheme

namespace = sub_train_obedience_outcome

## This mod hasn't set up outcome events for either AI or player targets, nor an
## on_action for scheme failure, as it currently assumes only players will be
## initiating the scheme, and that success chance is always 100%

# Following CK3 scheme outcome conventions:
# 0000-0999: Maintenance events
# 1000-1999: Setup events
# 2000-2999: Success events for scheme owner
# 3000-3999: Success events for scheme target
# 4000-4999: Failure events for scheme owner

##"Hard" rejections that block the target for future schemes
# 8100-8999: Early outcome events

# 0001: target died
# 0002: relationship with target changed
# 1000: scheme begins
# 1001-1003: scheme begins reactions
# 1500: Milestone 1
# 2000: success

######################################################
# MAINTENANCE EVENTS
# 0000-0999
######################################################

# Target died
sub_train_obedience_outcome.0001 = {
	type = character_event
	title = sub_train_obedience_outcome.0002.t
	desc = sub_train_obedience_outcome.0002.desc

	theme = seduce_scheme
	left_portrait = scope:target
	#No scheme, no widget

	option = {
		name = sub_train_obedience_outcome.0002.a
	}
}

# No more valid relation with target
sub_train_obedience_outcome.0002 = {
	type = character_event
	title = sub_train_obedience_outcome.0001.t
	desc = sub_train_obedience_outcome.0001.desc

	theme = seduce_scheme
	left_portrait = scope:target
	#No scheme, no widget

	option = {
		name = sub_train_obedience_outcome.0001.a
	}
}

######################################################
# SETUP EVENTS
# 1000-1999
######################################################

# Begin training
sub_train_obedience_outcome.1000 = {
	type = character_event
	title = sub_train_obedience_outcome.1000.t
	desc = sub_train_obedience_outcome.1000.desc

	theme = seduce_scheme
	left_portrait = scope:target
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}

	trigger = {
		exists = scope:scheme
	}

	immediate = {
		scope:scheme = {
			sub_count_categorized_personality_traits = yes
			sub_set_train_obedience_receptiveness = yes
		}
	}

	# TBD: This option is really for milestone events, not begin
	# TBD: Instead, use effects for deciding response type

	option = {
		trigger = {
			scope:target = { has_character_flag = sub_receptive_training_response }
		}

		name = sub_train_obedience_outcome.1000.a

		# trigger_event = {
		# 	on_action = sub_train_obedience_start_response
		# }
	}

	option = {
		trigger = {
			scope:target = { has_character_flag = sub_unreceptive_training_response }
		}

		name = sub_train_obedience_outcome.1000.b

		# trigger_event = {
		# 	on_action = sub_train_obedience_start_response
		# }
	}

	option = {
		trigger = {
			scope:target = { has_character_flag = sub_neutral_training_response }
		}

		name = sub_train_obedience_outcome.1000.c

		# trigger_event = {
		# 	on_action = sub_train_obedience_start_response
		# }
	}

	after = {
		scope:scheme = {
			sub_train_obedience_event_aftereffects = yes
		}
	}
}

# Begin training responses
sub_train_obedience_outcome.1001 = {}

# Milestone 1
sub_train_obedience_outcome.1500 = {
	type = character_event
	title = sub_train_obedience_outcome.1500.t
	desc = sub_train_obedience_outcome.1500.desc

	theme = seduce_scheme
	left_portrait = scope:target
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}

	trigger = {
		exists = scope:scheme
	}

	immediate = {
		scope:scheme = {
			sub_select_random_new_good_sub_trait = yes
			sub_select_random_replaced_trait = yes
		}
	}

	option = {
		scope:target = {
			sub_add_and_remove_selected_sub_traits = yes
		}

		name = "do trait swap"
	}

	option = {
		name = "ignore trait swap"
	}

	after = {
		scope:scheme = {
			sub_train_obedience_event_aftereffects = yes
		}
	}
}

######################################################
# SUCCESS EVENTS FOR OWNER
# 2000-2999
######################################################

sub_train_obedience_outcome.2000 = {
	type = character_event
	title = sub_train_obedience_outcome.2000.t
	desc = sub_train_obedience_outcome.2000.desc

	theme = seduce_scheme
	left_portrait = scope:target
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}


	immediate = {
		play_music_cue = "mx_cue_seduction"
		scope:target = {
			add_trait = sub_subservient_4
			add_opinion = {
				modifier = sub_subservient_to_master
				target = scope:owner
			}
		}
		scope:owner = {
			add_hook = {
				type = loyalty_hook
				target = scope:target
			}
			add_character_modifier = {
				modifier = sub_recent_training_modifier
				years = 5
			}
		}
	}

	option = {
		name = sub_train_obedience_outcome.2000.a
	}

	after = {
		if = {
			limit = { exists = scope:scheme }
			scope:scheme = {
				end_scheme = yes
			}
		}
	}
}
