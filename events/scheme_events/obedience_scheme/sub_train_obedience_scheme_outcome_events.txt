# The outcome of a sub_train_obedience scheme

namespace = sub_train_obedience_outcome

## This mod hasn't set up outcome events for either AI or player targets, nor an
## on_action for scheme failure, as it currently assumes only players will be
## initiating the scheme, and that success chance is always 100%

# Following CK3 scheme outcome conventions:
# 0000-0999: Maintenance events
# 1000-1999: Setup events
# 2000-2999: Success events for scheme owner
# 3000-3999: Success events for scheme target
# 4000-4999: Failure events for scheme owner

##"Hard" rejections that block the target for future schemes
# 8100-8999: Early outcome events

# 0001: target died
# 0002: relationship with target changed
# 1000: scheme begins
# 1001-1003: scheme begins reactions
# 1500-1502: milestones 1-3
# 2000: success

######################################################
# MAINTENANCE EVENTS
# 0000-0999
######################################################

# No more valid relation with target
sub_train_obedience_outcome.0001 = {
	type = character_event
	title = sub_train_obedience_outcome.0001.t
	desc = sub_train_obedience_outcome.0001.desc

	theme = seduce_scheme
	right_portrait = scope:target
	#No scheme, no widget

	option = {
		name = sub_train_obedience_outcome.0001.a
	}
}

# Target died
sub_train_obedience_outcome.0002 = {
	type = character_event
	title = sub_train_obedience_outcome.0002.t
	desc = sub_train_obedience_outcome.0002.desc

	theme = seduce_scheme
	right_portrait = scope:target
	#No scheme, no widget

	option = {
		name = sub_train_obedience_outcome.0002.a
	}
}

######################################################
# SETUP EVENTS
# 1000-1999
######################################################

# Begin training
sub_train_obedience_outcome.1000 = {
	type = character_event
	title = sub_train_obedience_outcome.1000.t
	desc = sub_train_obedience_outcome.1000.desc

	theme = seduce_scheme
	right_portrait = scope:target
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}

	trigger = {
		exists = scope:scheme
	}

	immediate = {
		scope:scheme = {
			sub_count_categorized_personality_traits = yes
			sub_set_train_obedience_receptiveness = yes
		}
	}

	option = {
		name = sub_train_obedience_outcome.1000.a

		trigger_event = {
				on_action = sub_train_obedience_start_response
			}
	}

	after = {
		hidden_effect = {
			scope:scheme = {
				sub_train_obedience_event_aftereffects = yes
			}	
		}
	}
}

# Begin training responses
# Positive response
sub_train_obedience_outcome.1001 = {
	type = character_event
	title = sub_train_obedience_outcome.1001.t
	desc = sub_train_obedience_outcome.1001.desc

	theme = seduce_scheme
	right_portrait = {
		character = scope:target
		animation = admiration
	}
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}

	trigger = {
		AND = {
			exists = scope:scheme
			scope:target = { has_character_flag = sub_receptive_training_response }
		}
	}

	option = {
		name = sub_train_obedience_outcome.1001.a

		scope:owner = {
			add_stress = -20
		}

		scope:target = {
			add_opinion = {
				modifier = sub_positive_training_start
				target = scope:owner
			}
		}
	}
}

# Negative response
sub_train_obedience_outcome.1002 = {
	type = character_event
	title = sub_train_obedience_outcome.1002.t
	desc = sub_train_obedience_outcome.1002.desc

	theme = seduce_scheme
	right_portrait = {
		character = scope:target
		animation = dismissal
	}
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}

	trigger = {
		AND = {
			exists = scope:scheme
			scope:target = { has_character_flag = sub_unreceptive_training_response }
		}
	}

	option = {
		name = sub_train_obedience_outcome.1002.a

		scope:owner = {
			add_stress = 20
		}

		scope:target = {
			add_opinion = {
				modifier = sub_negative_training_start
				target = scope:owner
			}
		}
	}

	option = {
		name = sub_train_obedience_outcome.1002.b

		scope:scheme = {
			end_scheme = yes
		}
	}
}

# Neutral response
# Positive response
sub_train_obedience_outcome.1003 = {
	type = character_event
	title = sub_train_obedience_outcome.1003.t
	desc = sub_train_obedience_outcome.1003.desc

	theme = seduce_scheme
	right_portrait = {
		character = scope:target
		animation = personality_coward
	}
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}

	trigger = {
		AND = {
			exists = scope:scheme
			scope:target = { has_character_flag = sub_neutral_training_response }
		}
	}

	option = {
		name = sub_train_obedience_outcome.1003.a
	}
}

# Milestone 1
sub_train_obedience_outcome.1500 = {
	type = character_event
	title = sub_train_obedience_outcome.1500.t
	# desc = sub_train_obedience_outcome.1500.desc
	desc = {
		desc = sub_train_obedience_outcome.1500.desc
		first_valid = {
			triggered_desc = {
				trigger = { scope:target = { has_character_flag = sub_receptive_training_response } }
				desc = sub_train_obedience_outcome.1500.pos_response.desc
			}
			triggered_desc = {
				trigger = { scope:target = { has_character_flag = sub_unreceptive_training_response } }
				desc = sub_train_obedience_outcome.1500.neg_response.desc
			}
			# should have a neutral flag, but leave as fallback
			desc = sub_train_obedience_outcome.1500.neutral_response.desc
		}
		desc = sub_train_obedience_outcome.1500.trait_swap.desc
	}

	theme = seduce_scheme
	right_portrait = {
		character = scope:target
	}
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}

	trigger = {
		exists = scope:scheme
	}

	immediate = {
		scope:scheme = {
			sub_select_random_replaced_trait = yes
			sub_select_random_replacement_trait = yes
			add_scheme_modifier = { type = sub_training_milestone_scheme_power_1 }
		}
		scope:target = {
			add_trait = sub_subservient_1
		}
	}

	option = {
		scope:target = {
			sub_add_and_remove_selected_sub_traits = yes
		}

		name = sub_train_obedience_outcome.1500.a
	}

	option = {
		name = sub_train_obedience_outcome.1500.b
	}

	after = {
		hidden_effect = {
			scope:scheme = {
				sub_set_scheme_opinion_modifier = yes
				sub_train_obedience_event_aftereffects = yes
			}
		}
	}
}

# Milestone 2
sub_train_obedience_outcome.1501 = {
	type = character_event
	title = sub_train_obedience_outcome.1501.t
	desc = {
		desc = sub_train_obedience_outcome.1501.desc
		first_valid = {
			triggered_desc = {
				trigger = { scope:target = { has_character_flag = sub_unreceptive_training_response } }
				desc = sub_train_obedience_outcome.1501.neg_response.desc
			}
			desc = sub_train_obedience_outcome.1501.pos_response.desc
		}
		desc = sub_train_obedience_outcome.1501.trait_swap.desc
	}

	theme = seduce_scheme
	right_portrait = {
		character = scope:target
		animation = personality_content
	}
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}

	trigger = {
		exists = scope:scheme
	}

	immediate = {
		scope:scheme = {
			sub_select_random_replaced_trait = yes
			sub_select_random_replacement_trait = yes
			add_scheme_modifier = { type = sub_training_milestone_scheme_power_2 }
		}
		scope:target = {
			hidden_effect = {
				remove_trait = sub_subservient_1
			}
			add_trait = sub_subservient_2
			add_opinion = {
				modifier = sub_positive_training_start
				target = scope:owner
			}
		}
	}

	option = {
		scope:target = {
			sub_add_and_remove_selected_sub_traits = yes
		}

		name = sub_train_obedience_outcome.1501.a
	}

	option = {
		name = sub_train_obedience_outcome.1501.b
	}

	after = {
		hidden_effect = {
			scope:scheme = {
				sub_set_scheme_opinion_modifier = yes
				sub_train_obedience_event_aftereffects = yes
			}
		}
	}
}

# Milestone 3
sub_train_obedience_outcome.1502 = {
	type = character_event
	title = sub_train_obedience_outcome.1502.t
	desc = {
		desc = sub_train_obedience_outcome.1502.desc
		desc = sub_train_obedience_outcome.1502.trait_swap.desc
	}

	theme = seduce_scheme
	right_portrait = {
		character = scope:target
		animation = ecstasy
	}
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}

	trigger = {
		exists = scope:scheme
	}

	immediate = {
		scope:scheme = {
			sub_select_random_replaced_trait = yes
			sub_select_random_replacement_trait = yes
			add_scheme_modifier = { type = sub_training_milestone_scheme_power_3 }
		}
		scope:target = {
			hidden_effect = {
				remove_trait = sub_subservient_2
			}
			add_trait = sub_subservient_3
			add_opinion = {
				modifier = sub_positive_training_start
				target = scope:owner
			}
		}
	}

	option = {
		scope:target = {
			sub_add_and_remove_selected_sub_traits = yes
		}

		name = sub_train_obedience_outcome.1502.a
	}

	option = {
		name = sub_train_obedience_outcome.1502.b
	}

	after = {
		hidden_effect = {
			scope:scheme = {
				sub_set_scheme_opinion_modifier = yes
				sub_train_obedience_event_aftereffects = yes
			}
		}
	}
}

######################################################
# SUCCESS EVENTS FOR OWNER
# 2000-2999
######################################################

sub_train_obedience_outcome.2000 = {
	type = character_event
	title = sub_train_obedience_outcome.2000.t
	desc = sub_train_obedience_outcome.2000.desc

	theme = seduce_scheme
	right_portrait = {
		character = scope:target
		animation = admiration
	}
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}


	immediate = {
		play_music_cue = "mx_cue_seduction"
		scope:target = {
			hidden_effect = {
				remove_trait = sub_subservient_3
			}
			add_trait = sub_subservient_4
			if = {
				limit = { can_set_relation_dominant_trigger = { CHARACTER = scope:owner } }
				set_relation_dominant = scope:owner
			}
			add_opinion = {
				modifier = sub_subservient_to_master
				target = scope:owner
			}
			add_character_flag = {
				flag = is_naked
				days = 180
			}
		}
		scope:owner = {
			add_hook = {
				type = loyalty_hook
				target = scope:target
			}
			if = {
				limit = { can_set_relation_submissive_trigger = { CHARACTER = scope:target } }
				set_relation_submissive = scope:target
			}
			add_character_modifier = {
				modifier = sub_recent_training_modifier
				years = 5
			}
		}
	}

	option = {
		name = sub_train_obedience_outcome.2000.a
	}

	after = {
		if = {
			limit = { exists = scope:scheme }
			scope:scheme = {
				end_scheme = yes
			}
		}
		scope:target = {
			remove_character_flag = is_naked
		}
	}
}
